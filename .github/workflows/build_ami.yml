name: Build and Share AMI

on:
  push:
    branches:
      - main

jobs:
  build-and-share-ami:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: csye6225_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create log directory and file
        run: |
          sudo mkdir -p /var/log/webapp
          sudo touch /var/log/webapp/csye6225.log
          sudo chmod 666 /var/log/webapp/csye6225.log

      - name: Run CI test
        run: |
          export FLASK_APP=app
          export FLASK_DEBUG=True
          export DATABASE_URL=${{ secrets.DATABASE_URL }}
          export CSV_PATH=./users.csv

          python -m unittest integration-test.py

      - name: Create webapp zip
        run: |
          zip -r webapp.zip . -x '*.git*' -x '.env' -x 'venv/*'

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Set environment variables for Packer
        run: |
          echo "PKR_VAR_aws_region=${{ vars.AWS_REGION }}" >> $GITHUB_ENV
          echo "PKR_VAR_source_ami=${{ vars.SOURCE_AMI }}" >> $GITHUB_ENV
          echo "PKR_VAR_ssh_username=${{ vars.SSH_USERNAME }}" >> $GITHUB_ENV
          echo "PKR_VAR_subnet_id=${{ vars.SUBNET_ID }}" >> $GITHUB_ENV
          echo "PKR_VAR_instance_type=${{ vars.INSTANCE_TYPE }}" >> $GITHUB_ENV
          echo "PKR_VAR_volume_size=${{ vars.VOLUME_SIZE }}" >> $GITHUB_ENV
          echo "PKR_VAR_volume_type=${{ vars.VOLUME_TYPE }}" >> $GITHUB_ENV
          echo "PKR_VAR_ami_users=${{ vars.AMI_USERS }}" >> $GITHUB_ENV

      # - name: Build AMI with Packer
      #   run: |
      #     packer init .
      #     packer build aws-debian.pkr.hcl

      - name: Fetch AMI ID
        run: |
          LATEST_AMI_ID=$($(aws ec2 describe-images --profile=dev \
            --filters "Name=tag:ami-key,Values=csye6225-ami" \
            --query 'sort_by(Images,&CreationDate)[-1].ImageId' \
            --output "text"
            
          echo "LATEST_AMI_ID=${LATEST_AMI_ID}" >> $GITHUB_ENV
          echo "LATEST_AMI_ID"

      - name: Fetch ASG Name
        run: |
          ASG_NAME=$(aws autoscaling describe-auto-scaling-groups \
            --filters "Name=tag:asg-key,Values=csye6225-asg" | \
            jq -r '.AutoScalingGroups[0].AutoScalingGroupName')
          echo "ASG_NAME=${ASG_NAME}" >> $GITHUB_ENV
          echo "ASG_NAME"

      - name: Fetch Launch Template ID
        run: |
          LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates \ 
            --query "sort_by(LaunchTemplates, &CreateTime)[-1].[LaunchTemplateId]" \ 
            --output "text")
          echo "LAUNCH_TEMPLATE_ID=${LAUNCH_TEMPLATE_ID}" >> $GITHUB_ENV
          echo "LAUNCH_TEMPLATE_ID"

      - name: Create Launch Template Version
        run: |
            aws ec2 describe-launch-templates \ 
              --launch-template-id $LAUNCH_TEMPLATE_ID \ 
              --query "sort_by(LaunchTemplates, &CreateTime)[-1].[LatestVersionNumber]" \ 
              --output "text"

            aws ec2 create-launch-template-version \ 
              --launch-template-id $LAUNCH_TEMPLATE_ID \ 
              --version-description latest \ 
              --source-version 1 \ 
              --launch-template-data "ImageId=$LATEST_AMI_ID"

      - name: Create Instance Refresh
        run: |
            aws autoscaling start-instance-refresh \ 
              --auto-scaling-group-name $ASG_NAME 


      - name: Wait for instance refresh to complete
        run: |
          INSTANCE_REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes \ 
            --auto-scaling-group-name ${ASG_NAME} \ 
            --query "InstanceRefreshes[?StartTime!=null] | sort_by(@, &StartTime)[-1].Status" \
            --output "text")

          while [ "$INSTANCE_REFRESH_STATUS" != "Successful" ]
          do
            echo "Instance refresh status: $INSTANCE_REFRESH_STATUS"
            sleep 10
            INSTANCE_REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes  \
              --auto-scaling-group-name ${ASG_NAME}  \ 
              --query "InstanceRefreshes[?StartTime!=null] | sort_by(@, &StartTime)[-1].Status" \ 
              --output text)

            if [ "$INSTANCE_REFRESH_STATUS" == "Failed" ] || [ "$INSTANCE_REFRESH_STATUS" == "Cancelled" ]
            then
              echo "Instance refresh failed or cancelled"
              exit 1
            fi
          done

          echo "Instance refresh status: $INSTANCE_REFRESH_STATUS"
          echo "Instances got refreshed and running with latest AMI"
